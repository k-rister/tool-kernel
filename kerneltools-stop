#!/bin/bash
exec >kerneltools-stop-stderrout.txt
exec 2>&1

echo "args: $@"
echo
echo "pwd: `/bin/pwd`"
echo
echo "hostname: `hostname`"
echo

# defaults
subtools="turbostat"
record_opts=""
perf_gen_local_report=0

longopts="subtools:,record-opts:,interval:,base-freq:,turbo-freq:,core-power:,perf-gen-local-report"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
eval set -- "$opts";
while true; do
    arg=$1
    shift
    case "$arg" in
        --subtools)
            subtools=$1
            shift;
            echo "subtools=$subtools"
            ;;
        --record-opts)
            record_opts=$1
            shift;
            echo "record_opts=$record_opts"
            ;;
        --base-freq)
            shift;
            ;;
        --core-power)
            shift;
            ;;
        --turbo-freq)
            shift;
            ;;
        --interval)
            shift;
            ;;
        --perf-gen-local-report)
            perf_gen_local_report=1
            ;;
        --)
            shift;
            break
            ;;
        *)
            echo "Ignoring option: $arg"
           shift
           ;;
    esac
done

echo "subtools: $subtools"

date
if [ -e kerneltools-pids.txt ]; then
    echo "kerneltools-pids.txt:"
    cat kerneltools-pids.txt
    echo
    while read pid; do
        echo "Going to kill pid $pid"
        kill -s SIGINT $pid
        sleep 5
        count=1
        while [ $count -lt 20 -a -e /proc/$pid ]; do
            echo "pgrep $perf:"
            pgrep perf
            let count=$count+1
            sleep 3
        done
    done <kerneltools-pids.txt
else
    exit 1
fi

date

for subtool in `echo $subtools | sed -e 's/,/ /g'`; do
    case "$subtool" in
        perf)
            echo "Running perf archive"
            time /usr/bin/perf archive perf.data
            if [ "$perf_gen_local_report" == "1" ]; then
                perf report 2>&1 >perf-report.txt
            fi
            xz --threads=0 perf.data
            ;;
        turbostat)
            if [ -e turbostat-out.txt ]; then
                echo "Compressing turbostat output"
                xz turbostat-out.txt
            else
                echo "Warning: turbostat-out.txt was not found"
            fi
            ;;
        trace-cmd)
            echo "Generating trace-cmd report"
            /usr/local/bin/trace-cmd report | xz -c >trace-cmd-report.txt.xz
            xz -T 0 trace.dat
            echo "Clearing trace buffers"
            /usr/local/bin/trace-cmd clear
            ;;
        *)
            echo "Invalid subtool: $subtool"
            ;;
    esac
done
